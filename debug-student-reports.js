// ==================== DEBUG ESPEC√çFICO PARA RELAT√ìRIOS DE ALUNOS ====================

console.log('üêõ Carregando debug espec√≠fico para relat√≥rios de alunos...');

// Fun√ß√£o para debug dos relat√≥rios de alunos
window.debugStudentReports = function() {
    console.log('üêõ === DEBUG RELAT√ìRIOS DE ALUNOS ===');
    
    // Verificar elementos DOM
    const selector = document.getElementById('studentSelector');
    const container = document.getElementById('studentReportData');
    const periodFilter = document.getElementById('studentPeriodFilter');
    
    console.log('üìã Elementos DOM:', {
        selector: !!selector,
        container: !!container,
        periodFilter: !!periodFilter
    });
    
    if (selector) {
        console.log('üìã Selector details:', {
            value: selector.value,
            options: selector.querySelectorAll('option').length,
            innerHTML: selector.innerHTML.substring(0, 200) + '...'
        });
    }
    
    if (container) {
        console.log('üìã Container details:', {
            innerHTML: container.innerHTML.substring(0, 200) + '...'
        });
    }
    
    // Verificar dados
    console.log('üìä Dados dispon√≠veis:', {
        students: window.students ? students.length : 'undefined',
        mensalidades: window.mensalidades ? mensalidades.length : 'undefined',
        contratos: window.contratos ? contratos.length : 'undefined'
    });
    
    if (window.students && students.length > 0) {
        console.log('üë• Primeiros 3 alunos:', students.slice(0, 3).map(s => ({ name: s.name, email: s.email })));
    }
    
    // Verificar fun√ß√µes auxiliares
    console.log('üîß Fun√ß√µes auxiliares:', {
        generateAvatar: typeof generateAvatar,
        getStudentLevel: typeof getStudentLevel,
        calculateStudentData: typeof calculateStudentData,
        loadStudentOptions: typeof loadStudentOptions,
        updateStudentReports: typeof updateStudentReports,
        loadReportsModule: typeof loadReportsModule
    });
    
    // Verificar se as abas est√£o funcionando
    const reportsTabContent = document.getElementById('reportsTabContent');
    const studentReportsContent = document.getElementById('studentReportsContent');
    
    console.log('üìã Estrutura de abas:', {
        reportsTabContent: !!reportsTabContent,
        studentReportsContent: !!studentReportsContent,
        studentReportsActive: studentReportsContent?.classList.contains('active')
    });
    
    console.log('üêõ === FIM DEBUG RELAT√ìRIOS DE ALUNOS ===');
};

// Fun√ß√£o para for√ßar carregamento da aba de alunos
window.forceStudentReportsTab = function() {
    console.log('üîÑ For√ßando carregamento da aba de relat√≥rios de alunos...');
    
    // Verificar se a fun√ß√£o showReportsTab existe
    if (typeof showReportsTab === 'function') {
        showReportsTab('students');
        console.log('‚úÖ Aba de alunos ativada');
        
        // Aguardar um pouco e verificar se carregou
        setTimeout(() => {
            const container = document.getElementById('studentReportData');
            const selector = document.getElementById('studentSelector');
            
            if (container && selector) {
                console.log('üîç Estado ap√≥s ativa√ß√£o:', {
                    containerHTML: container.innerHTML.substring(0, 100),
                    selectorOptions: selector.querySelectorAll('option').length
                });
                
                // Se o selector estiver vazio, tentar recarregar
                if (selector.querySelectorAll('option').length <= 1) {
                    console.log('‚ö†Ô∏è Selector vazio, tentando recarregar...');
                    if (typeof loadStudentOptions === 'function') {
                        loadStudentOptions();
                    }
                }
            }
        }, 500);
    } else {
        console.error('‚ùå Fun√ß√£o showReportsTab n√£o encontrada');
    }
};

// Fun√ß√£o para testar sele√ß√£o autom√°tica de um aluno
window.testStudentSelection = function() {
    console.log('üß™ Testando sele√ß√£o autom√°tica de aluno...');
    
    const selector = document.getElementById('studentSelector');
    if (!selector) {
        console.error('‚ùå Selector n√£o encontrado');
        return;
    }
    
    const options = selector.querySelectorAll('option');
    console.log(`üìä Op√ß√µes dispon√≠veis: ${options.length}`);
    
    if (options.length < 2) {
        console.error('‚ùå Nenhum aluno dispon√≠vel para teste');
        console.log('üîÑ Tentando recarregar op√ß√µes...');
        
        if (typeof loadStudentOptions === 'function') {
            loadStudentOptions();
            
            // Tentar novamente ap√≥s reload
            setTimeout(() => {
                const newOptions = selector.querySelectorAll('option');
                console.log(`üìä Op√ß√µes ap√≥s reload: ${newOptions.length}`);
                
                if (newOptions.length >= 2) {
                    // Selecionar primeiro aluno
                    const firstStudentOption = newOptions[1];
                    selector.value = firstStudentOption.value;
                    console.log(`üë§ Aluno selecionado: ${firstStudentOption.textContent}`);
                    
                    // Chamar fun√ß√£o de atualiza√ß√£o
                    if (typeof updateStudentReports === 'function') {
                        updateStudentReports();
                    }
                }
            }, 1000);
        }
        
        return;
    }
    
    // Selecionar primeiro aluno (√≠ndice 1, pois 0 √© "Selecione um aluno")
    const firstStudentOption = options[1];
    selector.value = firstStudentOption.value;
    
    console.log(`üë§ Aluno selecionado para teste: ${firstStudentOption.textContent}`);
    
    // Simular mudan√ßa
    const event = new Event('change', { bubbles: true });
    selector.dispatchEvent(event);
    
    // Chamar fun√ß√£o de atualiza√ß√£o
    if (typeof updateStudentReports === 'function') {
        updateStudentReports();
        console.log('‚úÖ Relat√≥rio atualizado');
    } else {
        console.error('‚ùå Fun√ß√£o updateStudentReports n√£o dispon√≠vel');
    }
};

// Fun√ß√£o para verificar se m√≥dulo de relat√≥rios carregou corretamente
window.checkReportsModule = function() {
    console.log('üîç === VERIFICA√á√ÉO DO M√ìDULO DE RELAT√ìRIOS ===');
    
    // Verificar se as fun√ß√µes principais existem
    const functions = [
        'loadReportsModule',
        'showReportsTab', 
        'updateStudentReports',
        'updateFinancialReports',
        'updatePerformanceReports'
    ];
    
    functions.forEach(func => {
        console.log(`üìã ${func}:`, typeof window[func]);
    });
    
    // Verificar elementos DOM principais
    const elements = [
        'gestaoContent',
        'reportsTabContent',
        'studentReportsContent',
        'studentSelector',
        'studentReportData'
    ];
    
    elements.forEach(id => {
        const element = document.getElementById(id);
        console.log(`üìã ${id}:`, !!element);
    });
    
    console.log('üîç === FIM VERIFICA√á√ÉO ===');
};

// Fun√ß√£o para for√ßar recarga completa dos relat√≥rios
window.forceReloadReports = function() {
    console.log('üîÑ For√ßando recarga completa dos relat√≥rios...');
    
    // Limpar container
    const gestaoContent = document.getElementById('gestaoContent');
    if (gestaoContent) {
        gestaoContent.innerHTML = '<p>Recarregando relat√≥rios...</p>';
        
        // Aguardar e recarregar
        setTimeout(() => {
            if (typeof loadReportsModule === 'function') {
                loadReportsModule();
                console.log('‚úÖ Relat√≥rios recarregados');
                
                // Ativar aba de alunos ap√≥s reload
                setTimeout(() => {
                    forceStudentReportsTab();
                }, 1000);
            } else {
                console.error('‚ùå loadReportsModule n√£o dispon√≠vel');
                gestaoContent.innerHTML = `
                    <div class="error-state">
                        <h3>Erro</h3>
                        <p>M√≥dulo de relat√≥rios n√£o carregado</p>
                        <button onclick="location.reload()">Recarregar P√°gina</button>
                    </div>
                `;
            }
        }, 500);
    }
};

// Disponibilizar no console para debug manual
window.debugSR = debugStudentReports;
window.forceSR = forceStudentReportsTab;
window.testSR = testStudentSelection;
window.checkRM = checkReportsModule;
window.reloadReports = forceReloadReports;

console.log('‚úÖ Debug avan√ßado de relat√≥rios carregado!');
console.log('üí° Comandos dispon√≠veis:');
console.log('  - debugSR() - Debug completo');
console.log('  - forceSR() - For√ßar aba de alunos');
console.log('  - testSR() - Testar sele√ß√£o');
console.log('  - checkRM() - Verificar m√≥dulo');
console.log('  - reloadReports() - Recarregar tudo'); 