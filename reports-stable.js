// ==================== SISTEMA EST√ÅVEL DE RELAT√ìRIOS ====================

console.log('‚úÖ Sistema est√°vel de relat√≥rios carregado!');

// Vari√°vel global para controlar estado de sele√ß√£o
window.reportsSelectionActive = false;
window.lastSelectedStudent = null;

// Fun√ß√£o para marcar sele√ß√£o como ativa
window.markReportsSelectionActive = function(studentEmail, studentName) {
    window.reportsSelectionActive = true;
    window.lastSelectedStudent = { email: studentEmail, name: studentName };
    console.log(`üîí Sele√ß√£o marcada como ativa: ${studentName}`);
    
    // Parar todas as verifica√ß√µes autom√°ticas por 60 segundos
    if (typeof stopRefreshInterference === 'function') {
        stopRefreshInterference();
    }
    
    // Reativar verifica√ß√µes apenas ap√≥s per√≠odo de inatividade
    setTimeout(() => {
        if (window.reportsSelectionActive) {
            console.log('üîÑ Verificando se sele√ß√£o ainda est√° ativa...');
            const currentSelection = typeof getSelectedReportsStudentEmail === 'function' ? 
                                   getSelectedReportsStudentEmail() : '';
            
            if (!currentSelection) {
                console.log('üîì Sele√ß√£o n√£o est√° mais ativa, liberando verifica√ß√µes');
                window.reportsSelectionActive = false;
                window.lastSelectedStudent = null;
            }
        }
    }, 60000); // 1 minuto
};

// Fun√ß√£o para limpar sele√ß√£o
window.clearReportsSelection = function() {
    window.reportsSelectionActive = false;
    window.lastSelectedStudent = null;
    console.log('üîì Sele√ß√£o de relat√≥rios limpa');
};

// Interceptar fun√ß√£o de sele√ß√£o de aluno se existir
if (typeof selectReportsStudent === 'function') {
    const originalSelectReportsStudent = selectReportsStudent;
    window.selectReportsStudent = function(email, name) {
        console.log(`üë§ Interceptando sele√ß√£o: ${name}`);
        
        // Executar sele√ß√£o original
        const result = originalSelectReportsStudent.apply(this, arguments);
        
        // Marcar como ativa
        markReportsSelectionActive(email, name);
        
        return result;
    };
}

// Interceptar fun√ß√£o de limpeza se existir
if (typeof clearReportsStudentSelection === 'function') {
    const originalClearReportsStudentSelection = clearReportsStudentSelection;
    window.clearReportsStudentSelection = function() {
        console.log('üßπ Interceptando limpeza de sele√ß√£o');
        
        // Executar limpeza original
        const result = originalClearReportsStudentSelection.apply(this, arguments);
        
        // Limpar estado
        clearReportsSelection();
        
        return result;
    };
}

// Verifica√ß√£o inteligente que respeita sele√ß√µes ativas
function stableReportsCheck() {
    // Se h√° sele√ß√£o ativa, N√ÉO fazer nada
    if (window.reportsSelectionActive) {
        console.log('üîí Sele√ß√£o ativa detectada, pulando verifica√ß√£o');
        return;
    }
    
    // Se n√£o h√° sele√ß√£o, verificar se campo existe
    const studentsTab = document.getElementById('studentReportsTab');
    const studentsContent = document.getElementById('studentReportsContent');
    
    if (studentsTab && studentsTab.classList.contains('active') && studentsContent) {
        const searchInput = studentsContent.querySelector('#reportsStudentSearchInput');
        
        if (!searchInput) {
            console.log('üì¶ Campo n√£o existe e sem sele√ß√£o ativa, criando...');
            if (typeof intelligentAutoCorrect === 'function') {
                intelligentAutoCorrect();
            }
        }
    }
}

// Verifica√ß√£o est√°vel a cada 30 segundos (muito reduzida)
setInterval(stableReportsCheck, 30000);

// Monitorar mudan√ßas de DOM para detectar quando sele√ß√£o √© perdida
const observer = new MutationObserver(function(mutations) {
    if (window.reportsSelectionActive) {
        mutations.forEach(function(mutation) {
            // Se o conte√∫do foi completamente substitu√≠do, a sele√ß√£o foi perdida
            if (mutation.type === 'childList' && mutation.removedNodes.length > 0) {
                const studentsContent = document.getElementById('studentReportsContent');
                if (studentsContent && !studentsContent.querySelector('#reportsStudentSearchInput')) {
                    console.log('‚ö†Ô∏è Conte√∫do foi substitu√≠do, sele√ß√£o pode ter sido perdida');
                    
                    // Verificar se realmente perdeu sele√ß√£o
                    const currentSelection = typeof getSelectedReportsStudentEmail === 'function' ? 
                                           getSelectedReportsStudentEmail() : '';
                    
                    if (!currentSelection && window.lastSelectedStudent) {
                        console.log('üîÑ Tentando restaurar sele√ß√£o perdida...');
                        
                        // Tentar restaurar sele√ß√£o ap√≥s pequeno delay
                        setTimeout(() => {
                            if (typeof selectReportsStudent === 'function' && window.lastSelectedStudent) {
                                selectReportsStudent(window.lastSelectedStudent.email, window.lastSelectedStudent.name);
                            }
                        }, 500);
                    }
                }
            }
        });
    }
});

// Observar mudan√ßas no container de relat√≥rios
const studentsContent = document.getElementById('studentReportsContent');
if (studentsContent) {
    observer.observe(studentsContent, {
        childList: true,
        subtree: true
    });
}

console.log('‚úÖ Sistema est√°vel configurado - sele√ß√µes ser√£o preservadas!'); 